{"version":3,"sources":["main.js"],"names":["$","console","log","click","newIngredient","val","processRequest","ingredient","recipes","getRecipes","query","url","response","axios","get","params","apiKey","diet","data","results","error","alert","detailedRecipes","Promise","all","map","newRecipe","getRecipeDetail","recipeId","includeNutrition","recipe","id","displayRecipes","itemsHtml","recipeListItemHtml","name","duration","servings","image","title","readyInMinutes","sourceUrl","html","displayIngredients","searchedItem","text"],"mappings":";AAAAA,EAAE,WACAC,QAAQC,IAAI,eAIZF,EAAE,UAAUG,MAAM,UAChBF,QAAQC,IAAI,iBAENE,MAAAA,EAAgBJ,EAAE,cAAcK,MACtCJ,QAAQC,IAAIE,GAOCE,eAAeC,GACtBC,MAAAA,QAgBOC,eAAWC,GACpB,IACIC,MAAAA,EAAM,6CAENC,QAAiBC,MAAMC,IAAIH,EAAK,CACpCI,OAAQ,CACNL,MAAOA,EACPM,OAFM,mCAGNC,KAAM,WAMHL,OAAAA,EAASM,KAAKC,QAMrB,MAAOC,GACPnB,QAAQC,IAAIkB,GACZC,MAAM,4CAtCcZ,CAAWF,GACjCN,QAAQC,IAAIM,GAIZc,sBAAwBC,QAAQC,IAC9BhB,EAAQiB,IAAI,MAAA,IACJC,MAAAA,QAmCGC,eAAiBC,GAC1B,IACIjB,MAAAA,yCAA6CiB,gBAE7ChB,QAAiBC,MAAMC,IAAIH,EAAK,CACpCI,OAAQ,CACNC,OADM,mCAENa,kBAAkB,KAIfjB,OAAAA,EAASM,KAChB,MAAOE,GACLnB,QAAQC,IAAIkB,GACZC,MAAM,4CAjDkBM,CAAgBG,EAAOC,IACxCL,OAAAA,KAIXzB,QAAQC,IAAIoB,iBAgDLU,SAAgBxB,GACjByB,MAAAA,EAAYzB,EAAQiB,IAAKK,IAC7B7B,QAAQC,IAAI4B,GAOPI,SAAmBC,EAAMlB,EAAMmB,EAAUC,EAAUC,EAAO3B,GAE9D,iDAEcA,MAAQwB,qCAEflB,uBACAmB,uBACAC,6CAEQC,2CAhBTJ,CAAmBJ,EAAOS,MAAO,WAAYT,EAAOU,yBAA0BV,EAAOO,oBAAqBP,EAAOQ,MAAOR,EAAOW,aAExIxC,QAAQC,IAAI+B,GACZjC,EAAE,SAAS0C,KAAKT,GArDhBD,CAAeV,iBAlBfhB,CAAeF,GA2FRuC,WACDC,MAAAA,EAAe5C,EAAE,cAAcK,MACrCJ,QAAQC,IAAI0C,GACZ5C,EAAE,MAAM6C,KAAKD,GA7FbD","file":"main.152df85c.js","sourceRoot":"..","sourcesContent":["$(function() {\n  console.log(\"Its working\");\n  // const url = \"https://api.spoonacular.com/recipes/search?query=\"\n  // const apiKey = \"&apiKey=502be8db956a4d2581735d3ceced3501&diet=vegan\"\n\n  $(\"button\").click(async () => {\n    console.log(\"button pushed\");\n\n    const newIngredient = $(\"#searchBar\").val();\n    console.log(newIngredient);\n    // const recipes = await getRecipes(newIngredient);\n    // displayRecipes(recipes)\n    processRequest(newIngredient)\n    displayIngredients()\n  });\n\n  async function processRequest(ingredient) {\n    const recipes = await getRecipes(ingredient);\n    console.log(recipes)\n\n    // We need to use Promise.all() using map() with promises\n    // see this post: https://futurestud.io/tutorials/node-js-how-to-run-an-asynchronous-function-in-array-map\n    detailedRecipes = await Promise.all(\n      recipes.map(async(recipe) => {\n        const newRecipe = await getRecipeDetail(recipe.id)\n        return newRecipe\n      })\n    )\n\n    console.log(detailedRecipes)\n    displayRecipes(detailedRecipes)\n  }\n\n  async function getRecipes(query) {\n    try {\n      const url = \"https://api.spoonacular.com/recipes/search\";\n\n      const response = await axios.get(url, {\n        params: {\n          query: query,\n          apiKey: process.env.SPOONACULAR_API_KEY,\n          diet: \"vegan\"\n        }\n      });\n      // const apiKey = \"&apiKey=502be8db956a4d2581735d3ceced3501&diet=vegan\"\n      // const response = await axios.get(`${url}${query}${apiKey}`)\n      // console.log(response.data.results);\n      return response.data.results\n\n      // return recipes.map(async(recipe) => {\n      //   return await getRecipeDetail(recipe.id)\n      // })\n      // console.log(response.data.results.title)\n    } catch (error) {\n      console.log(error);\n      alert(\"an error has occurred, please try again\");\n    }\n  }\n\n  async function getRecipeDetail (recipeId) {\n    try {\n      const url = `https://api.spoonacular.com/recipes/${recipeId}/information`;\n\n      const response = await axios.get(url, {\n        params: {\n          apiKey: process.env.SPOONACULAR_API_KEY,\n          includeNutrition: true\n        }\n      });\n      // console.log(response.data);\n      return response.data\n    } catch (error) {\n        console.log(error);\n        alert(\"an error has occurred, please try again\");\n    }\n  }\n\n  function displayRecipes (recipes) {\n    const itemsHtml = recipes.map((recipe) => {\n      console.log(recipe)\n      return recipeListItemHtml(recipe.title, \"vegan\", `${recipe.readyInMinutes} mins`, `${recipe.servings} servings`, recipe.image, recipe.sourceUrl)\n    })\n    console.log(itemsHtml)\n    $(\"tbody\").html(itemsHtml)\n  }\n\n  function recipeListItemHtml(name, diet, duration, servings, image, url) {\n    return (\n      `<tr>\n        <td> \n          <a href=\"${url}\">${name}</a>\n        </td>\n        <td>${diet}</td>\n        <td>${duration}</td>\n        <td>${servings}</td>\n        <td>\n          <img src=\"${image}\"/>\n        </td>\n      </tr>\n      `\n    )\n  }\n\n  function displayIngredients(){\n    const searchedItem = $('#searchbar').val()\n    console.log(searchedItem)\n    $(\"ul\").text(searchedItem)\n  }\n\n  \n});\n"]}